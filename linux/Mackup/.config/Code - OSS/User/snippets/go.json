{
  // Place your snippets for go here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "log.Printf": {
    "prefix": "lo",
    "body": ["fmt.Printf(\"\\n ${1:var} %#v\\n\", $0)"],
    "description": "fmt output"
  },
  "test.new": {
    "prefix": "test",
    "body": ["func Test_${1:it}(t *testing.T) {", "\tassert := assert.New(t)", "}"],
    "description": "Log output to console",
  },
  "comma-nil": {
    "prefix": "ni",
    "body": [", nil$0"],
    "description": "comman space nil"
  },
  "return nil": {
    "prefix": "ret",
    "body": ["return nil$0"],
    "description": "return nil"
  },
  "err-not-eq-nil-wrap": {
    "prefix": "ee",
    "body": ["if err != nil {", "\treturn errs.Wrap(err, \"${1:message}\")$0", "}"],
    "description": "comman space nil"
  },
  "err-not-eq-nil-wrapf": {
    "prefix": "eee",
    "body": ["if err != nil {", "\treturn errs.Wrapf(err, \"${1:message} %s\", ${2:var})$0", "}"],
    "description": "comman space nil"
  },
  "respond-err-wrapf": {
    "prefix": "ree",
    "body": ["if err != nil {", "\trespondError(ctx, w, http.StatusInternalServerError, errs.Wrap(err, \"${1:message}\"))$0", "\treturn", "}"],
    "description": "comman space nil"
  }
  // "console.log": {
  //   "prefix": "lozzz",
  //   "body": "console.log({ ${1:a: 11} })$0",
  //   "description": "Good 'ol console.log"
  // }
}
