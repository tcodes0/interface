{
  // Place your snippets for javascript here. Each snippet is defined under a snippet name and has a prefix, body and
  // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
  // same ids are connected.
  // Example:
  // "Print to console": {
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1')",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "console.log": {
    "prefix": "lo",
    "body": "console.log({ ${1:a: 11} })$0",
    "description": "Good 'ol console.log"
  },
  "dump.roles": {
    "prefix": "lor",
    "body": "logRoles(document.querySelector(\"body\")!);$0",
    "description": "Debug tests to find elements"
  },
  "dump test markup": {
    "prefix": "dom",
    "body": "console.log(prettyDOM(document.querySelector(\"body\")!));$0",
    "description": "Debug tests to find elements"
  },
  "logger.log": {
    "prefix": "loo",
    "body": "logger.log({ ${1:a: 11} })$0",
    "description": "logger.log"
  },
  "console.warn": {
    "prefix": "wa",
    "body": "console.log({ ${1:a:} })$0",
    "description": "Good 'ol console.warn"
  },
  "const": {
    "prefix": "c",
    "body": "const ${1:result} = $0",
    "description": "Create a new const"
  },
  "setStateFn": {
    "prefix": "ssf",
    "body": "this.setState(s => ({ ...s, ${1: value} })",
    "description": "Create a new const"
  },
  "importWhole": {
    "prefix": "imp",
    "body": "import ${2:moduleName} from '${1:module}'$0",
    "description": "Imports whole export"
  },
  "importModule": {
    "prefix": "imd",
    "body": "import { $2 } from '${1:module}'$0",
    "description": "Imports named exports"
  },
  "require": {
    "prefix": "req",
    "body": "const ${2:moduleName} = require('${1:module}')",
    "description": "Require a package"
  },
  "exportDefault": {
    "prefix": "exp",
    "body": "export default ${1:name}",
    "description": "Export default"
  },
  "arrowFunction": {
    "prefix": "anf",
    "body": "${1:()} => ${0}",
    "description": "Arrow function"
  },
  "arrowFunctionBlock": {
    "prefix": "anff",
    "body": "${1:()} => {\n\t${2}\n\treturn ${0}\n}",
    "description": "Arrow function block"
  },
  "destructingObject": {
    "prefix": "cd",
    "body": "const { ${1:id} } = ${2:props}",
    "description": "Destruct an object"
  },
  "setInterval": {
    "prefix": "sti",
    "body": "setInterval(() => {\n\t${1}\n}, 500)",
    "description": "setInterval"
  },
  "setTimeOut": {
    "prefix": "sto",
    "body": "setTimeout(() => {\n\t${1}\n}, 500)",
    "description": "setTimeOut"
  },
  "promise": {
    "prefix": "prom",
    "body": "new Promise((resolve, reject) => {\n\t${1}\n})",
    "description": "Returns a new Promise"
  },
  "Debugger": {
    "prefix": "deb",
    "body": "debugger",
    "description": "Insert a debugger statement"
  },
  "Return": {
    "prefix": "ret",
    "body": "return result",
    "description": "Insert a return statement"
  },
  "useCallback": {
    "prefix": "ucb",
    "body": "const ${1:callback} = useCallback(() => {\n\t${0}\n}, [])",
    "description": "useCallback"
  },
  "useMemo": {
    "prefix": "ume",
    "body": "const ${1:memo} = useMemo(() => ${0}, [])",
    "description": "useMemo"
  },
  "useState": {
    "prefix": "ust",
    "body": "const [${1}, set${1/(.*)/${1:/capitalize}/}] = useState($0)",
    "description": "useState"
  },
  "useEffect": {
    "prefix": "uef",
    "body": "useEffect(() => {\n\t${0}\n}, [])",
    "description": "useEffect"
  },
  "useAsyncEffect": {
    "prefix": "uaf",
    "body": "useAsyncEffect(async () => {\n\t${0}\n}, [])",
    "description": "useAsyncEffect"
  },
  "Export interface Props": {
    "prefix": "int",
    "body": "export interface Props extends${0} {\n\t${1}\n}",
    "description": "export interface Props"
  },
  "useDispatch hook": {
    "prefix": "dis",
    "body": "const dispatch = useDispatch()${0}",
    "description": "dispatch hook"
  },
  "useSelector hook": {
    "prefix": "sel",
    "body": "const ${1} = useSelector(s => s.${0})",
    "description": "dispatch hook"
  },
  "eslint-disable-next-line": {
    "prefix": "ednl",
    "body": "// eslint-disable-next-line",
    "description": "disable eslint on the next line"
  },
  "expect-to-match-inline-snapshot": {
    "prefix": "ein",
    "body": "expect(${1}).toMatchInlineSnapshot()",
    "description": "disable eslint on the next line"
  }
}
