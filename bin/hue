#! /bin/bash
# shellcheck disable=SC2154 # 2024: magic!
#
# 🚀   2018 by Thomazella 🌙
# http://tazel.website
# https://github.com/Thomazella
# reviewed by Thomazella on 2024
# main changes were linter fixes and some
# bad var names renamed for clarity
#
#- - - - - - - - - - - - - - - - - - - - - - - - -
#                 HELPER FUNCTIONS
#- - - - - - - - - - - - - - - - - - - - - - - - -

#exits with a message
bailout() {
  message=$*
  if [[ "$#" == "0" ]]; then
    message="error"
  fi
  echo -ne "\e[1;31m❌\040 $message\e[0m"
  if [[ ! "$-" =~ i ]]; then
    # shell is not interactive, so kill it.
    # 2024 commentary: yes, die.
    exit 1
  fi
}

parse-options() {
  #input   - $@ or string containing shorts (-s), longs (--longs), and arguments
  #returns - arrays with parsed data and opts set as vars
  #exports a var for each option. (-s => $s, --foo => $foo, --long-opt => $long_opt)
  #"-" are translated into "_"
  #"--" signals the end of options
  #shorts take no arguments, to give args to an option use a --long=arg
  # 2024 commentary: should be called parse-options-with-magic, but I won't rename or
  #     delete anything here for its historic value.

  if [[ "$#" == 0 ]]; then
    return
  fi

  #reject invalid invisible characters in input
  case "$@" in
  *'\000'* | *'\008'* | *'\009'* | *'\045'*) echo -e "\033[1;33;m WARNING: Input contains invalid characters, please use alphanumeric characters only.\033[0m" && exit 1 ;;
  esac

  # Opts we may have inherited from a parent function also using parse-options. Unset to void collisions.
  if [ "$allOptions" ]; then
    for opt in "${allOptions[@]}"; do
      unset "$opt"
    done
  fi

  local argn long short noMoreOptions

  #echo to split quoted args, repeat until no args left
  for arg in "$@"; do
    argn=$(("$argn" + 1))

    # if flag set
    if [[ "$noMoreOptions" ]]; then
      #end of options seen, just push remaining args
      arguments+=("$arg")
      continue
    fi

    # if end of options is seen
    if [[ "$arg" =~ ^--$ ]]; then
      # set flag to stop parsing
      noMoreOptions="true"
      continue
    fi

    # if long
    if [[ "$arg" =~ ^--[[:alpha:]_]{2} ]]; then
      #start on char 2, skip leading --
      long=${arg:2}
      # substitute any - with _
      long=${long/-/_}
      # if opt has an =, it means it has an arg
      if [[ "$arg" =~ ^--[[:alpha:]_][[:alpha:]_]+= ]]; then
        # split opt from arg. Ann=choco makes export ann=choco
        export "${long%=*}"="${long#*=}"
        longsWithArgs+=("${long%=*}")
      else
        #no arg, just push
        longs+=("$long")
      fi
      continue
    fi

    # if short
    if [[ "$arg" =~ ^-[[:alpha:]]+$ ]] && [[ ! "$arg" =~ = ]]; then
      local i=1 #start on 1, skip leading -
      # since shorts can be chained (-gpH), look at one char at a time
      while [ $i != ${#arg} ]; do
        short=${arg:$i:1}
        shorts+=("$short")
        i=$((i + 1))
      done
      continue
    fi

    # not a long or short, push as an arg
    arguments+=("$arg")
  done

  # give opts with no arguments value "true"
  for short in "${shorts[@]}"; do
    export "$short"="true"
  done

  for long in "${longs[@]}"; do
    export "$long"="true"
  done

  allOptions="$(get-shorts)$(get-longs)"
  export allOptions
}

#part of parse-options
get-shorts() {
  if [ "${#shorts[@]}" -gt 0 ]; then
    for short in "${shorts[@]}"; do
      echo -ne "$short "
    done
  fi
}

#part of parse-options
get-longs() {
  if [ "${#longs[@]}" -gt 0 ]; then
    for long in "${longs[@]}"; do
      echo -ne "$long "
    done
  fi
  if [ "${#longsWithArgs[@]}" -gt 0 ]; then
    for long in "${longsWithArgs[@]}"; do
      echo -ne "${long}* "
    done
  fi
}

#part of parse-options
get-arguments() {
  for arg in "${arguments[@]}"; do
    echo -ne "$arg "
  done
}
#- - - - - - - - - - - - - - - - - - - - - - - - -
#                      MAIN
#- - - - - - - - - - - - - - - - - - - - - - - - -
parse-options "$@"

#start of a color sequence
seqStart="\033["
#clear colors
seqClear="${seqStart}0m"
#256color start sequence
seq256Colorstart="38;05;"

print-all-combinations() {
  for bg in {40..47} {100..107} 49; do
    for fg in {30..37} {90..97} 39; do
      for fm in 0 1 2 3 4 5 7; do
        echo -ne "${seqStart}${fm};${bg};${fg}m \"\\${seqStart}${fm};${bg};${fg}m\" ${seqStart}0m"
      done
      printf "\n"
    done
  done
}

color256() {
  # arg 1: 256 color code $number.
  # output: 38;05;$number
  echo -n "${seq256Colorstart}${1}"
}

print-256-colors() {
  local bg
  for color in {0..255}; do
    echo -ne "${seqStart}$(color256 "$color")m $(printf %03d "$color")${seqClear}"
    echo -ne "${seqStart}7;$(color256 "$color")m $(printf %03d "$color")${seqClear}"
    if [ $(("${color}" % 12)) == 3 ]; then
      printf "\n"
    fi
  done
  echo -ne "${seqClear}"
}

print-ansi-colors() {
  # Original: https://github.com/stark/Color-Scripts/blob/master/color-scripts/colorview
  # Modified by Aaron Griffin
  # and further by Kazuo Teramoto
  # Color-scripts by Stark

  local FGNAMES=('black ' 'red' 'green' 'yellow' 'purple ' 'pink' 'teal ' 'white ' 'no 8' 'default ')
  local BGNAMES=('default' 'black  ' 'red    ' 'green  ' 'yellow ' 'purple ' 'pink   ' 'teal   ' 'white  ')
  #controls distance between columns
  local gutter="   "

  echo -e "\n${seqStart}7;49m* Bg * ${seqClear}$gutter${seqStart}7;49m  ****************   Normal and bold foreground   ****************  ${seqClear}"
  for b in {0..8}; do
    ((b > 0)) && bg=$((b + 39))

    #Left blank
    echo -en "${seqClear}${seqStart}7;39;49m       ${seqClear}$gutter"

    #Normal color row
    for f in {0..7} 9; do
      echo -en "${seqStart}${bg};$((f + 30))m  ${FGNAMES[f]}"
    done
    echo -en "${seqClear}"

    #Left Background color name
    echo -en "${seqClear}\n${seqStart}7;39;49m${BGNAMES[b]}${seqClear}$gutter"

    #Bold color row
    for f in {0..7} 9; do
      echo -en "${seqStart}${bg};1;$((f + 30))m  ${FGNAMES[f]}"
    done
    echo -en "${seqClear}\n"

    #Spacer
    ((b < 8)) && echo -e "${seqStart}7;m       ${seqClear}"
  done
}

candy() {
  echo "┌────────────────────────────────────────────────────────────┐"
  echo "├      Normal backgroud              Light background        ┤"
  echo "├    Normal          Bold           Normal          Bold     ┤"
  echo "└────────────────────────────────────────────────────────────┘"
  j=1
  for fg in 30 90 31 91 32 92 33 93 34 94 35 95 36 96 37 97 39; do
    for bg in 40 100 41 101 42 102 43 103 44 104 45 105 46 106 47 107; do
      for fm in 0 1; do
        if [ "$fm" == 0 ]; then
          if [ "$bg" == 49 ]; then
            buffer+="\n\n"
          fi
          buffer+=$(echo -ne "${seqStart}${fm};${bg};${fg}m \"\\${seqStart}${fm};${bg};${fg}m\" ${seqStart}0m")
        else
          buffer+=$(echo -ne "${seqStart}${fm};${bg};${fg}m \"\\${seqStart}${fm};${bg};${fg}m\" ${seqStart}0m")
        fi

        if [ "$((j % 4))" == 0 ]; then
          echo "$buffer"
          unset buffer
        fi

        j=$((j + 1))
      done
    done
  done
}

#this var stores user selected colors
sequence="${seqStart}"

if [ "$h" == 0 ] || [ "$help" == 0 ] || [ "$#" == 0 ]; then
  echo -e "\
  \n${seqStart}4;${seq256Colorstart}160m♦ HUE.SH ${seqStart}1;${seq256Colorstart}161mHELPS ${seqStart}0;4;${seq256Colorstart}162mTO MAKE ${seqStart}1;${seq256Colorstart}163mTHE TERMINAL ${seqStart}0;4;${seq256Colorstart}164mPRETTIER!${seqClear}\
  \n${seqStart}4;${seq256Colorstart}220m♦ HUE.SH ${seqStart}1;${seq256Colorstart}221mHELPS ${seqStart}0;4;${seq256Colorstart}222mTO MAKE ${seqStart}1;${seq256Colorstart}223mTHE TERMINAL ${seqStart}0;4;${seq256Colorstart}224mPRETTIER!${seqClear}\
  \n${seqStart}4;${seq256Colorstart}70m♦ HUE.SH ${seqStart}1;${seq256Colorstart}71mHELPS ${seqStart}0;4;${seq256Colorstart}72mTO MAKE ${seqStart}1;${seq256Colorstart}73mTHE TERMINAL ${seqStart}0;4;${seq256Colorstart}74mPRETTIER!${seqClear}\
  \n${seqStart}4;${seq256Colorstart}20m♦ HUE.SH ${seqStart}1;${seq256Colorstart}21mHELPS ${seqStart}0;4;${seq256Colorstart}22mTO MAKE ${seqStart}1;${seq256Colorstart}23mTHE TERMINAL ${seqStart}0;4;${seq256Colorstart}24mPRETTIER!${seqClear}
  \n♦︎ $ hue.sh --pink --bold hue.sh works like an echo on steroids for colors\
  \n  < ${seqStart}35;1;49mhue.sh works like an echo on steroids for colors${seqClear}
  \n♦ $ hue.sh --red --underline --swap --bg=teal Hello!\
  \n  < ${seqStart}4;7;31;46mHello!${seqClear}
  \n♦ ${seqStart}4mANSI colors:${seqClear}
  ${seqStart}7;30m 30 ${seqClear}${seqStart}1;30m 30 ${seqClear}--black        ${seqStart}7;34m 34 ${seqClear}${seqStart}1;34m 34 ${seqClear}--purple
  ${seqStart}7;31m 31 ${seqClear}${seqStart}1;31m 31 ${seqClear}--red          ${seqStart}7;35m 35 ${seqClear}${seqStart}1;35m 35 ${seqClear}--pink
  ${seqStart}7;32m 32 ${seqClear}${seqStart}1;32m 32 ${seqClear}--green        ${seqStart}7;36m 36 ${seqClear}${seqStart}1;36m 36 ${seqClear}--teal
  ${seqStart}7;33m 33 ${seqClear}${seqStart}1;33m 33 ${seqClear}--yellow       ${seqStart}7;37m 37 ${seqClear}${seqStart}1;37m 37 ${seqClear}--white
  ${seqStart}7;39m 39 ${seqClear}${seqStart}1;39m 39 ${seqClear}--default
  ${seqStart}7;90m 90 ${seqClear}${seqStart}1;90m 90 ${seqClear}--light-black  ${seqStart}7;94m 94 ${seqClear}${seqStart}1;94m 94 ${seqClear}--light-purple
  ${seqStart}7;91m 91 ${seqClear}${seqStart}1;91m 91 ${seqClear}--light-red    ${seqStart}7;95m 95 ${seqClear}${seqStart}1;95m 95 ${seqClear}--light-pink
  ${seqStart}7;92m 92 ${seqClear}${seqStart}1;92m 92 ${seqClear}--light-green  ${seqStart}7;96m 96 ${seqClear}${seqStart}1;96m 96 ${seqClear}--light-teal
  ${seqStart}7;93m 93 ${seqClear}${seqStart}1;93m 93 ${seqClear}--light-yellow ${seqStart}7;97m 97 ${seqClear}${seqStart}1;97m 97 ${seqClear}--light-white
  \n♦ ${seqStart}4m256color:${seqClear}${seqStart}2;49m#${seqClear}
  ${seqStart}7;${seq256Colorstart}86m 86 ${seqClear}${seqStart}${seq256Colorstart}86;49m 86 ${seqClear}--hue=86       ${seqStart}7;${seq256Colorstart}204m 204 ${seqClear}${seqStart}${seq256Colorstart}204;49m 204 ${seqClear}--hue=204
  ${seqStart}7;${seq256Colorstart}53m 53 ${seqClear}${seqStart}${seq256Colorstart}53;49m 53 ${seqClear}--hue=53       ${seqStart}7;${seq256Colorstart}220m 220 ${seqClear}${seqStart}${seq256Colorstart}220;49m 220 ${seqClear}--hue=220
  \n♦ ${seqStart}4mstyles${seqStart}2;49m*${seqClear}
  ${seqStart}1;7;99m 01 ${seqClear} ${seqStart}1m--bold${seqClear}            ${seqStart}7;99m ${seqStart}4m04${seqStart}24m ${seqClear} ${seqStart}4m--underline${seqClear}
  ${seqStart}2;7;99m 02 ${seqClear} ${seqStart}2m--dim${seqClear}             ${seqStart}5;7;99m 05 ${seqClear} ${seqStart}5m--blink${seqClear}${seqStart}2;49m#${seqClear}
  ${seqStart}3;7;99m 03 ${seqClear} ${seqStart}3m--italic.${seqStart}2;49m#${seqClear}        ${seqStart}7;99m 07 ${seqClear} ${seqStart}7m--swap${seqClear}${seqStart}2;49m+${seqClear}
  \n  ${seqStart}2;49m* You can combine them!${seqClear}
  ${seqStart}2;49m# Depends on terminal emulator support.${seqClear}
  ${seqStart}2;49m+ Swap works swapping foreground and background color.${seqClear}
  \n♦ ${seqStart}4mbackgrounds${seqClear}
  ${seqStart}107;30m--bg=default${seqClear}           ${seqStart}46m--bg=teal${seqClear}
  ${seqStart}100m--bg=light-black${seqClear}       --bg=${seqStart}3m...any ANSI color!${seqClear}
  ${seqStart}7;38;05;150;49m--hue=150 --swap${seqClear}       ${seqStart}7;38;05;20;49m--hue=20 --swap${seqClear}
  \n♦ ${seqStart}4mmore options:${seqClear}
  --code                 output color code only
  --palette              view all possible ANSI combinations
  --view=ansi            view ANSI color preview
  --view=256             view 256color preview
  --newline, -n          don't print a newline
  --candy                🍫 🌈"
  # 2024 commentary: --candy was originally commented out, I added it back in
  exit
fi

# shellcheck disable=SC2194 # 2024: magic!
case "true" in
"$palette") print-all-combinations && exit ;;
"$candy") candy && exit ;;
esac

if
  [ "$view" == "ansi" ] || [ "$view" == "ANSI" ]
then print-ansi-colors && exit; elif
  [ "$view" == "256" ]
then
  print-256-colors && exit
fi

# styles
# only (bold or default) or only (bold) prints yellow. Implementation quirk.
if [ "$bold" ]; then sequence+="1;"; fi
if [ "$dim" ]; then sequence+="2;"; fi
if [ "$italic" ]; then sequence+="3;"; fi
if [ "$underline" ]; then sequence+="4;"; fi
if [ "$blink" ]; then sequence+="5;"; fi
if [ "$swap" ]; then sequence+="7;"; fi

# foregrounds
if [[ "$hue" =~ ^[[:digit:]]+$ ]]; then
  if [[ "$hue" =~ _ ]] || [ "$hue" -gt 255 ]; then
    echo -e "${seqStart}1;33;m WARNING: $hue is out of bounds for 256 color codes.
          Use a number between 0 and 255.${seqClear}"
  else
    sequence+="$(color256 "$hue");"
  fi
elif [ "$black" ]; then
  sequence+="30;"
elif [ "$red" ]; then
  sequence+="31;"
elif [ "$green" ]; then
  sequence+="32;"
elif [ "$yellow" ]; then
  sequence+="33;"
elif [ "$purple" ]; then
  sequence+="34;"
elif [ "$pink" ]; then
  sequence+="35;"
elif [ "$teal" ]; then
  sequence+="36;"
elif [ "$white" ]; then
  sequence+="37;"
elif [ "$default" ]; then
  sequence+="39;"
elif [ "$light_black" ]; then
  sequence+="90;"
elif [ "$light_red" ]; then
  sequence+="91;"
elif [ "$light_green" ]; then
  sequence+="92;"
elif [ "$light_yellow" ]; then
  sequence+="93;"
elif [ "$light_purple" ]; then
  sequence+="94;"
elif [ "$light_pink" ]; then
  sequence+="95;"
elif [ "$light_teal" ]; then
  sequence+="96;"
elif [ "$light_white" ]; then
  sequence+="97;"
fi

# backgrounds
case $bg in
black) sequence+="40;" ;;
red) sequence+="41;" ;;
green) sequence+="42;" ;;
yellow) sequence+="43;" ;;
purple) sequence+="44;" ;;
pink) sequence+="45;" ;;
teal) sequence+="46;" ;;
white) sequence+="47;" ;;
default) sequence+="49;" ;;
light_black) sequence+="100;" ;;
light_red) sequence+="101;" ;;
light_green) sequence+="102;" ;;
light_yellow) sequence+="103;" ;;
light_purple) sequence+="104;" ;;
light_pink) sequence+="105;" ;;
light_teal) sequence+="106;" ;;
light_white) sequence+="107;" ;;
*) sequence+="" ;;
esac

#trim last character (;) to close sequence with "m"
sequence=${sequence:0:-1}"m"

if [ "$code" ]; then
  #print sequence as-is. Add 'printf \"' so user can copy paste output
  echo -n "printf \"$sequence"
  if [ "$(get-arguments)" ]; then
    # print all arguments, if any
    echo -ne -- "$(get-arguments)"
  fi
  #close \" clear formatting
  echo -n "${seqClear}\""
  # echo -n "\" && printf \"${seqClear}\" && printf \"\n\""
else
  #interpret sequence to produce colored output
  echo -ne "$sequence$(get-arguments)"
fi

# clear formatting
echo -ne "${seqClear}"

#print a newline
if ! [ "$n" ] || [ "$newline" ]; then
  printf "\n"
fi
