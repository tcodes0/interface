#! /usr/bin/env bash
# Copyright 2024 Raphael Thomazella. All rights reserved.
# Use of this source code is governed by the BSD-3-Clause
# license that can be found in the LICENSE file and online
# at https://opensource.org/license/BSD-3-clause.
#
# downloads youtube videos by id in a few formats
# note: undefined functions are in lib.sh (sourced via BASH_ENV)
# shellcheck disable=SC2155

set -euo pipefail
shopt -s globstar
trap 'err $LINENO' ERR

### vars and functions ###

vid_id=${1:-}
title=${2:-}
out_dir="/plex/music/youtube-sets"
audio_fmt=""
audio_ext=""
video_fmt=""
video_ext=""

usage() {
  msgln "Usage: $0 <youtube_video_id> <title>"
  msgln
  msgln output will be in "$out_dir"
  msgln note: youtube video id will be appended to title
}

validate_input() {
  if [ ! "$vid_id" ]; then
    usage
    fatal "$LINENO" "no video id"
  fi

  if [ ! "$title" ]; then
    usage
    fatal "$LINENO" "no title"
  fi
}

validate_plex_perms() {
  if ! [[ "$out_dir" =~ ^/plex ]]; then
    debug $LINENO "output not a plex directory, skip"

    return
  fi

  local not_plex=$(find $out_dir -not -user plex -or -not -group plex) sudo_timeout=10s

  if [ "$not_plex" ]; then
    log $LINENO sudo required to change ownership of files to plex \(10s\)

    if ! timeout --kill-after=$sudo_timeout $sudo_timeout sudo chown -R plex:plex $out_dir; then
      true # ignore timeout here, it's optional
    fi
  fi
}

prepare_temp() {
  local temp
  temp=$(mktemp -d youtube_dl-XXXXXX -p /tmp)

  log $LINENO using temp "$temp"
  cd "$temp"
}

download() {
  local format_id=$1

  if [ ! "$format_id" ]; then
    return
  fi

  if ! yt-dlp -f "$format_id" "$vid_id" --output "%(title)s-%(release_date)s.%(ext)s"; then
    fatal "$LINENO" "yt-dlp error"
  fi
}

prompt_audio_format() {
  msgln note: high quality video has no audio, choose audio now
  msgln choose an audio format:

  read -r
  audio_fmt="$REPLY"
  msgln audio extension: \(see column EXT\)

  read -r
  audio_ext="$REPLY"
}

prompt_video_format() {
  msgln Choose a video format:
  msgln 4k: look for mp4 3840x2160
  msgln 2k: look for mp4 2560x1440
  msgln Leave blank to download only audio

  read -r
  video_fmt="$REPLY"

  if [ "$video_fmt" ]; then
    msgln Video extension: \(see column EXT\)

    read -r
    video_ext="$REPLY"
  fi
}

validate_formats() {
  local audio_fmt=$1 video_fmt=$2

  if [ "$audio_fmt" ] && ! [[ "$audio_fmt" =~ ^[0-9]+$ ]]; then
    fatal "$LINENO" "audio format must be a number"
  fi

  if [ "$video_fmt" ] && ! [[ "$video_fmt" =~ ^[0-9]+$ ]]; then
    fatal "$LINENO" "video format must be a number"
  fi

  if [ "$video_fmt" ] && [ ! "$audio_fmt" ]; then
    warn "$LINENO" "video might have no audio"
    sleep 2
  fi
}

mux() {
  local audio_fmt=$1 audio_ext=$2 video_fmt=$3 video_ext=$4 name=$5

  if [ ! "$audio_fmt" ] || [ ! "$video_fmt" ]; then
    log "$LINENO" "skip mux: expected audio and video format"
    sleep 1
    return
  fi

  ffmpeg -i ./*."$audio_ext" -i ./*."$video_ext" -crf 26 -ac 2 "$name.mp4"
  mv "$name.mp4" "$out_dir"
}

convert_MP3() {
  local audio_fmt=$1 video_fmt=$2 name=$3

  if [ ! "$audio_fmt" ] || [ "$video_fmt" ]; then
    log "$LINENO" "skip mp3 convert: expected audio only format"
    sleep 1
    return
  fi

  # extension not needed, assume only one audio file
  ffmpeg -i ./* -codec:a libmp3lame -q:a 0 "$name.mp3"
  mv "$name.mp3" "$out_dir"
}

### script ###

if requested_help "$*"; then
  usage
  exit 1
fi

current_wd=$(pwd)

validate_input
# catch files from previous runs early
validate_plex_perms
prepare_temp

yt-dlp "$vid_id" --list-formats

prompt_audio_format
prompt_video_format

validate_formats "$audio_fmt" "$video_fmt"

download "$audio_fmt"
download "$video_fmt"
filename="$title-$vid_id"

mux "$audio_fmt" "$audio_ext" "$video_fmt" "$video_ext" "$filename"
convert_MP3 "$audio_fmt" "$video_fmt" "$filename"

validate_plex_perms

cd "$current_wd"
