#! /usr/bin/env bash
# Copyright 2024 Raphael Thomazella. All rights reserved.
# Use of this source code is governed by the BSD-3-Clause
# license that can be found in the LICENSE file and online
# at https://opensource.org/license/BSD-3-clause.
#
# downloads youtube videos by id in a few formats
# note: undefined functions are in lib.sh (sourced via BASH_ENV)

set -euo pipefail
shopt -s globstar
trap 'err $LINENO' ERR

### vars and functions ###

vid_id=${1:-}
format=${2:-}
title=${3:-}
skip_download=$([[ "$*" == *-no-download* ]] && echo yes || echo "")
current_wd=$(pwd)
out_dir="$HOME/Desktop"

declare -rA format_regexps=(
  ["4k"]="mp4.+3840x2160"
  ["2k"]="mp4.+2560x1440"
  ["audio-only"]="opus.+132k 48k" # produces webm extension
)

usage() {
  println "Usage: $0 <youtube_video_id> <format> <title> -no-download"
  println formats:

  for key in "${!format_regexps[@]}"; do
    println "- $key"
  done

  println
  println flags:
  println -no-download: manually download and place files in working dir. No temp is created.
  println \\tuseful when format parsing is not working for the video.
  println
  println output will be in "$out_dir"
  println note: youtube video id will be appended to title
}

validateInput() {
  if [ ! "$vid_id" ] || [ "$vid_id" == -h ] || [ "$vid_id" == --help ]; then
    usage
    fatal "$LINENO" "no video id"
  fi

  if [ ! "$format" ]; then
    usage
    fatal "$LINENO" "no format"
  fi

  if [ ! "$title" ]; then
    usage
    fatal "$LINENO" "no title"
  fi
}

prepareTemp() {
  local temp
  temp=$(mktemp -d youtube_dl-XXXXXX -p /tmp)

  loginfo $LINENO using temp "$temp"
  cd "$temp"
}

download() {
  local format_line fmt="$1"

  if ! format_line=$(grep -Eie "${format_regexps[$fmt]}" < <(yt-dlp "$vid_id" --list-formats)); then
    yt-dlp "$vid_id" --list-formats 2>/dev/null
    fatal "$LINENO" "parsing failed: '${format_regexps[$fmt]}'"
  fi

  read -rs format_id _ <<<"$format_line"

  if ! yt-dlp -f "$format_id" "$vid_id" --output "%(title)s-%(release_date)s.%(ext)s"; then
    yt-dlp "$vid_id" --list-formats 2>/dev/null
    fatal "$LINENO" "yt-dlp error, formats supported above"
  fi
}

### script ###

validateInput

if [ ! "$skip_download" ]; then
  prepareTemp
  download "$format"
fi

# video formats have no audio, download audio then mux
if [ "$format" != "audio-only" ]; then
  out_filename="$title-$vid_id".mp4

  if [ ! "$skip_download" ]; then
    download audio-only
  fi

  # mux audio and video
  ffmpeg -i ./*.mp4 -i ./*.webm -crf 26 -ac 2 "$out_filename"
else
  out_filename="$title-$vid_id".mp3
  # convert mp3
  ffmpeg -i ./* -codec:a libmp3lame -q:a 0 "$out_filename"
fi

mv "$out_filename" "$out_dir"
cd "$current_wd"
