#! /usr/bin/env bash
# Copyright 2024 Raphael Thomazella. All rights reserved.
# Use of this source code is governed by the BSD-3-Clause
# license that can be found in the LICENSE file and online
# at https://opensource.org/license/BSD-3-clause.
#
# a helper to a few git chores like adding and composing standard commit messages
# note: undefined functions are in lib.sh (sourced via BASH_ENV)
#
# GLOBALS:
#   PUSH_REPOS string: a list of repos to automatically push after a commit

set -euo pipefail
shopt -s globstar
trap 'err $LINENO' ERR

### vars and functions ###

# known issue: these configs can be name differently
default_commit_cfg=$HOME/.commitlintrc.yml
default_cspell_cfg=$HOME/.cspell.config.yml
commit_cfg=.commitlintrc.yml
cspell_cfg=.cspell.config.yml

git_do() {
  # check for another git process running at this time (rare edge-case)
  # i.e. some IDE; wait for it to finish
  while [ -f "$PWD/.git/index.lock" ]; do
    log $LINENO ".git/index.lock exits, waiting..."
    sleep 1
  done

  command git "$@"
}

validate_deps() {
  if ! command -v commitlint >/dev/null; then
    fatal "$LINENO" "commitlint not found; try 'npm install -g @commitlint/cli'"
  fi

  if ! command -v cspell >/dev/null; then
    fatal "$LINENO" "cspell not found; try 'npm install -g cspell@latest'"
  fi

  if [ ! -f ".commitlintrc.yml" ]; then
    commit_cfg=$default_commit_cfg
  fi

  if [ ! -f ".cspell.config.yml" ]; then
    cspell_cfg=$default_cspell_cfg
  fi
}

commit() {
  local manually_staged
  manually_staged=$(git diff --name-only --cached)

  if [ "$manually_staged" ]; then
    log $LINENO "committing files already staged..."
  fi

  if [ ! "$manually_staged" ] && ! git_do add --all; then
    fatal "$LINENO" "git add --all failed"
  else
    manually_staged=$(git_do diff --name-only --cached)

    if [ ! "$manually_staged" ]; then
      fatal "$LINENO" "no staged files"
    fi
  fi

  local type="${1/:/}" scope="${2/:/}" subject="${*:3}"

  if [ ! "$type" ] || [ ! "$scope" ] || [ ! "$subject" ]; then
    fatal $LINENO "usage: lg <type> <scope> <commit subject>"
  fi

  local commit_msg="$type($scope): $subject"
  if [[ "$scope" =~ ^.$ ]]; then
    commit_msg="$type: $subject"
  fi

  command commitlint --config "$commit_cfg" <<<"$commit_msg"
  command cspell --no-color --config "$cspell_cfg" stdin 2>/dev/null <<<"$commit_msg"

  if git_do commit -q -m "$commit_msg"; then
    msgln "$commit_msg"
  fi
}

push() {
  if [ ! "${PUSH_REPOS:-}" ]; then
    return
  fi

  base_pwd="$(basename "$PWD")"
  if [[ $PUSH_REPOS != .*[[:blank:]]*${base_pwd}[[:blank:]]*.* ]]; then
    return
  fi

  log $LINENO "$base_pwd matches \$PUSH_REPOS"

  if ! git_do push >/dev/null 2>&1; then
    log $LINENO set upstream to origin/"$GIT_BRANCH"
    git_do push --set-upstream origin "$GIT_BRANCH" >/dev/null 2>&1
  fi
}

### script ###

validate_deps
commit "$@"
push
git_do status --short
